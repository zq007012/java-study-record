<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
    <!--先定义所有的appender, 节点console、File、 RollingFile就是appender, 通过这些节点的name属性来区分, 节点console和File都是只能有一个, RollingFile可以有多个-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--日志的格式-->
            <PatternLayout pattern="[%logger] - [%p] - %t -  %l - [%d{yyyy-MM-dd HH:mm:ss:SSS}] - log: %m%n%n"/>
        </console>

        <!--文件会打印出所有信息，这个log文件每次启动程序会自动清空，由append属性决定，false为清空, true为不清空, 这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="log/test.log" append="false">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %t - %l - %m%n"/>
        </File>

        <!-- 这个会保存所有的info及以上级别的信息到文件中-->
        <RollingFile name="RollingFileInfo" fileName="${sys:user.home}/logs/info.log"
                     filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--日志的格式-->
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %t - %l - %m%n"/>
            <!--每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <!-- 这个会保存所有的warn及以上级别的信息到文件中-->
        <RollingFile name="RollingFileWarn" fileName="${sys:user.home}/logs/warn.log"
                     filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--日志的格式-->
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %t - %l - %m%n"/>
            <!--每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <!-- 这个会保存所有的error及以上级别的信息到文件中-->
        <RollingFile name="RollingFileError" fileName="${sys:user.home}/logs/error.log"
                     filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--日志的格式-->
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %t - %l - %m%n"/>
            <!--每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
    </appenders>
    <!--然后定义loggers，只有定义了loggers并引入的appender，appender才会生效-->
    <loggers>
        <!--不输出项目使用的 依赖的 info以下的信息, 找到这些依赖输出日志的logger的名字, 通过<logger>节点设置这些logger输出日志的等级-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <logger name="org.apache.ibatis" level="INFO"/>
        <logger name="com.github.pagehelper" level="INFO"/>
        <logger name="com.zq.mapper" level="INFO"/>
        <!--只有在这里引入了appender, appender的功能才会起作用-->
        <root level="all">
            <!--在控制台显示日志-->
            <appender-ref ref="Console"/>
            <!--测试阶段使用的log文件-->
            <!--<appender-ref ref="log"/>-->
            <!--保存所有的info及以上级别的信息到文件中-->
            <!--<appender-ref ref="RollingFileInfo"/>-->
            <!--保存所有的warn及以上级别的信息到文件中-->
            <!--<appender-ref ref="RollingFileWarn"/>-->
            <!--保存所有的error及以上级别的信息到文件中-->
            <!--<appender-ref ref="RollingFileError"/>-->
        </root>
    </loggers>
</configuration>